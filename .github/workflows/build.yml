name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  python-build:
    strategy:
      matrix:
        python-version: ["3.11"]
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Copy README.md to core directory
      run: |
        cp README.md core/
        cp README.md core/log2ml/
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        cd core
        pip install -e ".[dev]"
        cd ..
    
    - name: Test with pytest
      run: |
        cd core
        pytest tests/ --cov=log2ml --cov-report=xml
        cd ..
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./core/coverage.xml
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  tauri-build:
    needs: python-build
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
    - uses: actions/checkout@v4

    - name: Check GUI directory (Windows)
      id: check_gui
      if: ${{ runner.os == 'Windows' }}
      shell: pwsh
      run: |
        $ErrorActionPreference = 'Stop'
        if ((Test-Path 'gui/vector-analyzer') -and (Test-Path 'gui/vector-analyzer/package.json')) {
          "gui_exists=true" >> $env:GITHUB_OUTPUT
        } else {
          "gui_exists=false" >> $env:GITHUB_OUTPUT
          Write-Host "GUI directory or package.json not found - skipping Tauri build"
          exit 0
        }

    - name: Check GUI directory (Unix)
      id: check_gui_unix
      if: ${{ runner.os != 'Windows' }}
      shell: bash
      run: |
        if [ -d "gui/vector-analyzer" ] && [ -f "gui/vector-analyzer/package.json" ]; then
          echo "gui_exists=true" >> $GITHUB_OUTPUT
        else
          echo "gui_exists=false" >> $GITHUB_OUTPUT
          echo "GUI directory or package.json not found - skipping Tauri build"
          exit 0
        fi

    - name: Setup node
      if: |
        (runner.os == 'Windows' && steps.check_gui.outputs.gui_exists == 'true') ||
        (runner.os != 'Windows' && steps.check_gui_unix.outputs.gui_exists == 'true')
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Install Rust stable
      if: |
        (runner.os == 'Windows' && steps.check_gui.outputs.gui_exists == 'true') ||
        (runner.os != 'Windows' && steps.check_gui_unix.outputs.gui_exists == 'true')
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy

    - name: Rust lint
      if: |
        (runner.os == 'Windows' && steps.check_gui.outputs.gui_exists == 'true') ||
        (runner.os != 'Windows' && steps.check_gui_unix.outputs.gui_exists == 'true')
      run: |
        cd gui/vector-analyzer/src-tauri
        cargo fmt --check
        cargo clippy -- -D warnings

    - name: Install dependencies (ubuntu only)
      if: ${{ steps.check_gui_unix.outputs.gui_exists == 'true' && matrix.platform == 'ubuntu-latest' }}
      run: |
        # Add required repositories
        sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
        sudo apt-get update

        # Install required packages
        sudo apt-get install -y \
          libgtk-3-dev \
          libwebkit2gtk-4.0-dev \
          libappindicator3-dev \
          librsvg2-dev \
          patchelf \
          libatk1.0-dev \
          libgdk-pixbuf2.0-dev \
          libcairo2-dev \
          libsoup2.4-dev \
          libpango1.0-dev \
          build-essential \
          curl \
          wget \
          file \
          libssl-dev \
          pkg-config \
          gtk+3.0 \
          gir1.2-gtk-3.0 \
          libatk-bridge2.0-dev \
          at-spi2-core \
          libatk-adaptor \
          libglib2.0-dev \
          libgtk-3-0 \
          libgtk-3-common \
          libgtk-3-bin \
          libgdk3.0-cil \
          libgdk3.0-cil-dev \
          libgdk-pixbuf2.0-0 \
          libgdk-pixbuf2.0-common \
          libgdk-pixbuf2.0-dev

    - name: Configure pkg-config and environment (ubuntu only)
      if: ${{ steps.check_gui_unix.outputs.gui_exists == 'true' && matrix.platform == 'ubuntu-latest' }}
      run: |
        # Create a list of potential pkg-config paths
        PKG_CONFIG_PATHS=(
          "/usr/lib/x86_64-linux-gnu/pkgconfig"
          "/usr/share/pkgconfig"
          "/usr/lib/pkgconfig"
          "/usr/local/lib/pkgconfig"
          "/usr/local/share/pkgconfig"
          "/usr/lib/x86_64-linux-gnu/gdk-pixbuf-2.0/2.10.0/loaders"
        )
        
        # Export PKG_CONFIG_PATH
        export PKG_CONFIG_PATH=$(IFS=:; echo "${PKG_CONFIG_PATHS[*]}")
        echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH" >> $GITHUB_ENV
        
        # Set additional environment variables
        echo "GDK_PIXBUF_MODULEDIR=/usr/lib/x86_64-linux-gnu/gdk-pixbuf-2.0/2.10.0/loaders" >> $GITHUB_ENV
        echo "GDK_PIXBUF_MODULE_FILE=/usr/lib/x86_64-linux-gnu/gdk-pixbuf-2.0/2.10.0/loaders.cache" >> $GITHUB_ENV
        
        # Update GDK pixbuf loaders cache
        sudo gdk-pixbuf-query-loaders --update-cache
        
        # Create symbolic links for important .pc files if they don't exist in standard locations
        for pc_file in atk.pc gdk-3.0.pc gtk+-3.0.pc; do
          source_file=$(find /usr -name "$pc_file" 2>/dev/null | head -n 1)
          if [ -n "$source_file" ]; then
            for pkg_dir in "${PKG_CONFIG_PATHS[@]}"; do
              sudo mkdir -p "$pkg_dir"
              if [ ! -f "$pkg_dir/$pc_file" ]; then
                sudo ln -sf "$source_file" "$pkg_dir/$pc_file"
                echo "Created symlink for $pc_file in $pkg_dir"
              fi
            done
          fi
        done
        
        # Verify GDK and GTK installation
        echo "Verifying GDK/GTK installation:"
        pkg-config --modversion gdk-3.0 || echo "gdk-3.0 not found"
        pkg-config --modversion gtk+-3.0 || echo "gtk+-3.0 not found"
        
        echo "Package locations:"
        find /usr -name "gdk*.pc" 2>/dev/null || echo "No GDK .pc files found"
        find /usr -name "gtk*.pc" 2>/dev/null || echo "No GTK .pc files found"
        
        echo "Library status:"
        ldconfig -p | grep -E "libgdk|libgtk"
        
        echo "Package config paths:"
        pkg-config --variable pc_path pkg-config

    - name: Create valid icon for Windows
      if: ${{ steps.check_gui.outputs.gui_exists == 'true' && matrix.platform == 'windows-latest' }}
      shell: pwsh
      run: |
        # Create a directory for the icon if it doesn't exist
        $iconDir = "gui/vector-analyzer/src-tauri/icons"
        New-Item -ItemType Directory -Force -Path $iconDir

        # Create a 1x1 pixel ICO file (absolute minimum size)
        $icoBytes = @(
          # ICO Header (6 bytes)
          0x00, 0x00,  # Reserved
          0x01, 0x00,  # Type (1 = ICO)
          0x01, 0x00,  # Number of images

          # Directory Entry (16 bytes)
          0x01, 0x00,  # Width (1 pixel)
          0x01, 0x00,  # Height (1 pixel)
          0x00,        # Color palette
          0x00,        # Reserved
          0x01, 0x00,  # Color planes
          0x01, 0x00,  # Bits per pixel (1)
          0x2C, 0x00, 0x00, 0x00,  # Size of image data (44 bytes)
          0x16, 0x00, 0x00, 0x00,  # Offset to image data

          # BITMAPINFOHEADER (40 bytes)
          0x28, 0x00, 0x00, 0x00,  # Header size
          0x01, 0x00, 0x00, 0x00,  # Width
          0x02, 0x00, 0x00, 0x00,  # Height (2 = 1 * 2 for XOR and AND masks)
          0x01, 0x00,              # Planes
          0x01, 0x00,              # Bits per pixel
          0x00, 0x00, 0x00, 0x00,  # Compression
          0x00, 0x00, 0x00, 0x00,  # Image size
          0x00, 0x00, 0x00, 0x00,  # X pixels per meter
          0x00, 0x00, 0x00, 0x00,  # Y pixels per meter
          0x02, 0x00, 0x00, 0x00,  # Colors used
          0x02, 0x00, 0x00, 0x00,  # Important colors

          # Color table (8 bytes)
          0x00, 0x00, 0x00, 0x00,  # Black
          0xFF, 0xFF, 0xFF, 0x00,  # White

          # XOR mask (1 byte padded to 4)
          0xFF, 0x00, 0x00, 0x00,  # One white pixel, padded

          # AND mask (1 byte padded to 4)
          0x00, 0x00, 0x00, 0x00   # One opaque pixel, padded
        )

        # Write the icon file
        [System.IO.File]::WriteAllBytes("$iconDir/icon.ico", $icoBytes)

        # Verify the file
        $fileInfo = Get-Item "$iconDir/icon.ico"
        if ($fileInfo.Exists) {
            Write-Host "Icon file created successfully"
            Write-Host "File size: $($fileInfo.Length) bytes"
            Write-Host "File path: $($fileInfo.FullName)"
            Write-Host "File exists and is readable: $((Test-Path $fileInfo.FullName -PathType Leaf))"
            Get-Content "$iconDir/icon.ico" -Encoding Byte -TotalCount 22 | ForEach-Object { Write-Host ("{0:X2} " -f $_) -NoNewline }
        } else {
            Write-Error "Failed to create icon file"
            exit 1
        }

    - name: Install dependencies (macos only)
      if: ${{ steps.check_gui_unix.outputs.gui_exists == 'true' && matrix.platform == 'macos-latest' }}
      run: |
        brew install pkg-config

    - name: Install frontend dependencies
      if: |
        (runner.os == 'Windows' && steps.check_gui.outputs.gui_exists == 'true') ||
        (runner.os != 'Windows' && steps.check_gui_unix.outputs.gui_exists == 'true')
      run: |
        cd gui/vector-analyzer
        yarn install

    - name: Build Tauri app
      if: |
        (runner.os == 'Windows' && steps.check_gui.outputs.gui_exists == 'true') ||
        (runner.os != 'Windows' && steps.check_gui_unix.outputs.gui_exists == 'true')
      run: |
        cd gui/vector-analyzer
        yarn run tauri:build
