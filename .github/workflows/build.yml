name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  python-build:
    strategy:
      matrix:
        python-version: ["3.11"]
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Copy README.md to core directory
      run: |
        cp README.md core/
        cp README.md core/log2ml/
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        cd core
        pip install -e ".[dev]"
        cd ..
    
    - name: Test with pytest
      run: |
        cd core
        pytest tests/ --cov=log2ml --cov-report=xml
        cd ..
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./core/coverage.xml
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  tauri-build:
    needs: python-build
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
    - uses: actions/checkout@v4

    - name: Check GUI directory (Windows)
      id: check_gui
      if: ${{ runner.os == 'Windows' }}
      shell: pwsh
      run: |
        $ErrorActionPreference = 'Stop'
        if ((Test-Path 'gui/vector-analyzer') -and (Test-Path 'gui/vector-analyzer/package.json')) {
          "gui_exists=true" >> $env:GITHUB_OUTPUT
        } else {
          "gui_exists=false" >> $env:GITHUB_OUTPUT
          Write-Host "GUI directory or package.json not found - skipping Tauri build"
          exit 0
        }

    - name: Check GUI directory (Unix)
      id: check_gui_unix
      if: ${{ runner.os != 'Windows' }}
      shell: bash
      run: |
        if [ -d "gui/vector-analyzer" ] && [ -f "gui/vector-analyzer/package.json" ]; then
          echo "gui_exists=true" >> $GITHUB_OUTPUT
        else
          echo "gui_exists=false" >> $GITHUB_OUTPUT
          echo "GUI directory or package.json not found - skipping Tauri build"
          exit 0
        fi

    - name: Setup node
      if: |
        (runner.os == 'Windows' && steps.check_gui.outputs.gui_exists == 'true') ||
        (runner.os != 'Windows' && steps.check_gui_unix.outputs.gui_exists == 'true')
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Install Rust stable
      if: |
        (runner.os == 'Windows' && steps.check_gui.outputs.gui_exists == 'true') ||
        (runner.os != 'Windows' && steps.check_gui_unix.outputs.gui_exists == 'true')
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy

    - name: Rust lint
      if: |
        (runner.os == 'Windows' && steps.check_gui.outputs.gui_exists == 'true') ||
        (runner.os != 'Windows' && steps.check_gui_unix.outputs.gui_exists == 'true')
      run: |
        cd gui/vector-analyzer/src-tauri
        cargo fmt --check
        cargo clippy -- -D warnings

    - name: Install dependencies (ubuntu only)
      if: ${{ steps.check_gui_unix.outputs.gui_exists == 'true' && matrix.platform == 'ubuntu-latest' }}
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgtk-3-dev \
          libwebkit2gtk-4.0-dev \
          libappindicator3-dev \
          librsvg2-dev \
          patchelf \
          libatk1.0-dev \
          libgdk-pixbuf2.0-dev \
          libcairo2-dev \
          libsoup2.4-dev \
          libpango1.0-dev \
          build-essential \
          curl \
          wget \
          file \
          libssl-dev \
          pkg-config \
          gtk+3.0 \
          gir1.2-gtk-3.0

    - name: Verify Ubuntu packages
      if: ${{ steps.check_gui_unix.outputs.gui_exists == 'true' && matrix.platform == 'ubuntu-latest' }}
      run: |
        # Export PKG_CONFIG_PATH for the session
        export PKG_CONFIG_PATH="/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig"
        echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH" >> $GITHUB_ENV
        
        # List installed GTK packages
        echo "Installed GTK packages:"
        dpkg -l | grep -E "libgtk|gir1.2-gtk|gtk\+3.0"
        
        # Debug pkg-config
        echo -e "\npkg-config debug info:"
        pkg-config --debug 2>&1 gdk-3.0 || true
        
        # Find gdk-3.0.pc
        echo -e "\nSearching for gdk-3.0.pc:"
        find /usr -name "gdk-3.0.pc" 2>/dev/null || true
        
        # Check GTK version
        echo -e "\nGTK version info:"
        pkg-config --modversion gtk+-3.0 || true
        
        # List all available packages
        echo -e "\nAll available pkg-config packages:"
        pkg-config --list-all | grep -i "gtk\|gdk"

    - name: Create empty icon
      if: ${{ runner.os == 'Windows' && steps.check_gui.outputs.gui_exists == 'true' }}
      shell: pwsh
      run: |
        $iconDir = "gui/vector-analyzer/src-tauri/icons"
        if (-not (Test-Path $iconDir)) {
          New-Item -ItemType Directory -Force -Path $iconDir
        }
        # Create a minimal valid .ico file
        $iconBytes = [byte[]]@(
          0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x10, 0x10,
          0x00, 0x00, 0x01, 0x00, 0x20, 0x00, 0x68, 0x04,
          0x00, 0x00, 0x16, 0x00, 0x00, 0x00
        ) + (New-Object byte[] 1024)
        [System.IO.File]::WriteAllBytes("$iconDir/icon.ico", $iconBytes)

    - name: Install dependencies (macos only)
      if: ${{ steps.check_gui_unix.outputs.gui_exists == 'true' && matrix.platform == 'macos-latest' }}
      run: |
        brew install pkg-config

    - name: Install frontend dependencies
      if: |
        (runner.os == 'Windows' && steps.check_gui.outputs.gui_exists == 'true') ||
        (runner.os != 'Windows' && steps.check_gui_unix.outputs.gui_exists == 'true')
      run: |
        cd gui/vector-analyzer
        yarn install

    - name: Build Tauri app
      if: |
        (runner.os == 'Windows' && steps.check_gui.outputs.gui_exists == 'true') ||
        (runner.os != 'Windows' && steps.check_gui_unix.outputs.gui_exists == 'true')
      run: |
        cd gui/vector-analyzer
        yarn run tauri:build
