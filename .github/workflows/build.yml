name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  python-build:
    strategy:
      matrix:
        python-version: ["3.11"]
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Copy README.md to core directory
      run: |
        cp README.md core/
        cp README.md core/log2ml/
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        cd core
        pip install -e ".[dev]"
        cd ..
    
    - name: Test with pytest
      run: |
        cd core
        pytest tests/ --cov=log2ml --cov-report=xml
        cd ..
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./core/coverage.xml
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  tauri-build:
    needs: python-build
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
    - uses: actions/checkout@v4

    - name: Check GUI directory (Windows)
      id: check_gui
      if: ${{ runner.os == 'Windows' }}
      shell: pwsh
      run: |
        $ErrorActionPreference = 'Stop'
        if ((Test-Path 'gui/vector-analyzer') -and (Test-Path 'gui/vector-analyzer/package.json')) {
          "gui_exists=true" >> $env:GITHUB_OUTPUT
        } else {
          "gui_exists=false" >> $env:GITHUB_OUTPUT
          Write-Host "GUI directory or package.json not found - skipping Tauri build"
          exit 0
        }

    - name: Check GUI directory (Unix)
      id: check_gui_unix
      if: ${{ runner.os != 'Windows' }}
      shell: bash
      run: |
        if [ -d "gui/vector-analyzer" ] && [ -f "gui/vector-analyzer/package.json" ]; then
          echo "gui_exists=true" >> $GITHUB_OUTPUT
        else
          echo "gui_exists=false" >> $GITHUB_OUTPUT
          echo "GUI directory or package.json not found - skipping Tauri build"
          exit 0
        fi

    - name: Setup node
      if: |
        (runner.os == 'Windows' && steps.check_gui.outputs.gui_exists == 'true') ||
        (runner.os != 'Windows' && steps.check_gui_unix.outputs.gui_exists == 'true')
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Install Rust stable
      if: |
        (runner.os == 'Windows' && steps.check_gui.outputs.gui_exists == 'true') ||
        (runner.os != 'Windows' && steps.check_gui_unix.outputs.gui_exists == 'true')
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy

    - name: Rust lint
      if: |
        (runner.os == 'Windows' && steps.check_gui.outputs.gui_exists == 'true') ||
        (runner.os != 'Windows' && steps.check_gui_unix.outputs.gui_exists == 'true')
      run: |
        cd gui/vector-analyzer/src-tauri
        cargo fmt --check
        cargo clippy -- -D warnings

    - name: Install dependencies (ubuntu only)
      if: ${{ steps.check_gui_unix.outputs.gui_exists == 'true' && matrix.platform == 'ubuntu-latest' }}
      run: |
        # Add required repositories
        sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
        sudo apt-get update

        # Install required packages
        sudo apt-get install -y \
          libgtk-3-dev \
          libwebkit2gtk-4.0-dev \
          libappindicator3-dev \
          librsvg2-dev \
          patchelf \
          libatk1.0-dev \
          libgdk-pixbuf2.0-dev \
          libcairo2-dev \
          libsoup2.4-dev \
          libpango1.0-dev \
          build-essential \
          curl \
          wget \
          file \
          libssl-dev \
          pkg-config \
          gtk+3.0 \
          gir1.2-gtk-3.0 \
          libatk-bridge2.0-dev \
          at-spi2-core \
          libatk-adaptor \
          libglib2.0-dev \
          libgtk-3-0 \
          libgtk-3-common \
          libgtk-3-dev \
          libgtk-3-bin \
          libgdk3.0-cil \
          libgdk3.0-cil-dev \
          libgdk-pixbuf2.0-0 \
          libgdk-pixbuf2.0-common \
          libgdk-pixbuf2.0-dev \
          gir1.2-gdkpixbuf-2.0

    - name: Configure pkg-config for GDK (ubuntu only)
      if: ${{ steps.check_gui_unix.outputs.gui_exists == 'true' && matrix.platform == 'ubuntu-latest' }}
      run: |
        # First, find the actual gdk-3.0.pc file
        echo "Searching for gdk-3.0.pc..."
        GDK_PC_FILE=$(find /usr -name "gdk-3.0.pc" 2>/dev/null | head -n 1)
        echo "Found GDK PC file at: $GDK_PC_FILE"
        
        if [ -n "$GDK_PC_FILE" ]; then
          GDK_PC_DIR=$(dirname "$GDK_PC_FILE")
          echo "GDK PC directory: $GDK_PC_DIR"
          
          # Set PKG_CONFIG_PATH to include the directory containing gdk-3.0.pc
          export PKG_CONFIG_PATH="$GDK_PC_DIR:${PKG_CONFIG_PATH:-}"
          echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH" >> $GITHUB_ENV
          
          echo "Verifying pkg-config setup:"
          pkg-config --validate gdk-3.0 || true
          pkg-config --libs --cflags gdk-3.0 || true
        else
          echo "gdk-3.0.pc not found, installing missing packages..."
          sudo apt-get update
          sudo apt-get install -y --fix-missing \
            libgtk-3-dev \
            libgdk-pixbuf2.0-dev
        fi
        
        # Create symbolic links if needed
        for pc_dir in /usr/lib/x86_64-linux-gnu/pkgconfig /usr/share/pkgconfig /usr/lib/pkgconfig; do
          sudo mkdir -p "$pc_dir"
          if [ -f "$GDK_PC_FILE" ] && [ ! -f "$pc_dir/gdk-3.0.pc" ]; then
            sudo ln -sf "$GDK_PC_FILE" "$pc_dir/gdk-3.0.pc"
            echo "Created symlink for gdk-3.0.pc in $pc_dir"
          fi
        done
        
        # Set additional environment variables
        echo "Setting additional environment variables..."
        export PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1
        export PKG_CONFIG_ALLOW_SYSTEM_LIBS=1
        echo "PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1" >> $GITHUB_ENV
        echo "PKG_CONFIG_ALLOW_SYSTEM_LIBS=1" >> $GITHUB_ENV
        
        # Debug information
        echo "Current environment:"
        env | grep -i "pkg_config"
        
        echo "pkg-config version:"
        pkg-config --version
        
        echo "pkg-config search path:"
        pkg-config --variable pc_path pkg-config
        
        echo "GDK version info:"
        pkg-config --modversion gdk-3.0 || echo "GDK version check failed"
        
        echo "GDK library info:"
        pkg-config --libs --cflags gdk-3.0 || echo "GDK library check failed"
        
        echo "System libraries:"
        ldconfig -p | grep -i "libgdk"
        
        echo "Available .pc files:"
        find /usr -name "*.pc" | grep -i "gdk"

    - name: Verify GDK installation
      if: ${{ steps.check_gui_unix.outputs.gui_exists == 'true' && matrix.platform == 'ubuntu-latest' }}
      run: |
        echo "Testing GDK installation..."
        
        # Check if pkg-config can find GDK
        if pkg-config --exists gdk-3.0; then
          echo "GDK found by pkg-config"
          echo "Version: $(pkg-config --modversion gdk-3.0)"
          echo "Cflags: $(pkg-config --cflags gdk-3.0)"
          echo "Libs: $(pkg-config --libs gdk-3.0)"
        else
          echo "GDK not found by pkg-config"
          echo "Current PKG_CONFIG_PATH: $PKG_CONFIG_PATH"
          echo "Available .pc files in standard locations:"
          find /usr/lib/x86_64-linux-gnu/pkgconfig /usr/share/pkgconfig -name "*.pc"
        fi
        
        # Test GTK/GDK functionality
        echo "Testing GTK/GDK compilation..."
        cat << 'EOF' > test.c
        #include <gtk/gtk.h>
        int main(int argc, char *argv[]) {
          gtk_init(&argc, &argv);
          return 0;
        }
        EOF
        
        gcc -o test test.c $(pkg-config --cflags --libs gtk+-3.0) || echo "Compilation failed"

    - name: Create valid icon for Windows
      if: ${{ steps.check_gui.outputs.gui_exists == 'true' && matrix.platform == 'windows-latest' }}
      shell: pwsh
      run: |
        # Create a directory for the icon if it doesn't exist
        $iconDir = "gui/vector-analyzer/src-tauri/icons"
        New-Item -ItemType Directory -Force -Path $iconDir

        # Create a standard 32x32 icon with proper bitmap structure
        $iconBytes = [byte[]]@(
            # ICO Header (6 bytes)
            0x00, 0x00,              # Reserved
            0x01, 0x00,              # Type (1 = ICO)
            0x01, 0x00,              # Number of images

            # Directory Entry (16 bytes)
            0x20,                    # Width (32 pixels)
            0x20,                    # Height (32 pixels)
            0x00,                    # Color count (0 = 256)
            0x00,                    # Reserved
            0x01, 0x00,             # Color planes
            0x20, 0x00,             # Bits per pixel (32)
            0x28, 0x10, 0x00, 0x00, # Size of image data (4136 bytes = 40 + 32*32*4)
            0x16, 0x00, 0x00, 0x00  # Offset to image data (22 bytes)

            # BITMAPINFOHEADER (40 bytes)
            0x28, 0x00, 0x00, 0x00, # Size of header (40 bytes)
            0x20, 0x00, 0x00, 0x00, # Width (32 pixels)
            0x40, 0x00, 0x00, 0x00, # Height (64 pixels = 32 * 2 for XOR and AND masks)
            0x01, 0x00,             # Planes (1)
            0x20, 0x00,             # Bits per pixel (32)
            0x00, 0x00, 0x00, 0x00, # Compression (0 = none)
            0x00, 0x10, 0x00, 0x00, # Image size (4096 bytes = 32*32*4)
            0x00, 0x00, 0x00, 0x00, # X pixels per meter
            0x00, 0x00, 0x00, 0x00, # Y pixels per meter
            0x00, 0x00, 0x00, 0x00, # Colors used (0)
            0x00, 0x00, 0x00, 0x00  # Important colors (0)
        )

        # Add XOR mask (32x32 pixels, 32-bit BGRA)
        $xorMask = New-Object byte[] 4096  # 32 * 32 * 4 bytes
        for ($i = 0; $i -lt $xorMask.Length; $i += 4) {
            # White pixel with full opacity
            $xorMask[$i + 0] = 0xFF  # Blue
            $xorMask[$i + 1] = 0xFF  # Green
            $xorMask[$i + 2] = 0xFF  # Red
            $xorMask[$i + 3] = 0xFF  # Alpha
        }
        $iconBytes += $xorMask

        # Add AND mask (32x32 pixels, 1-bit monochrome, padded to 32-bit boundary)
        $andMask = New-Object byte[] 128  # (32 * 32) / 8 bytes, padded
        for ($i = 0; $i -lt $andMask.Length; $i++) {
            $andMask[$i] = 0x00  # All pixels opaque
        }
        $iconBytes += $andMask

        # Write the icon file
        [System.IO.File]::WriteAllBytes("$iconDir/icon.ico", $iconBytes)

        # Verify the file
        $fileInfo = Get-Item "$iconDir/icon.ico"
        if ($fileInfo.Exists) {
            Write-Host "Icon file created successfully"
            Write-Host "File size: $($fileInfo.Length) bytes"
            Write-Host "Expected size: 4264 bytes (22 + 40 + 4096 + 128)"
            Write-Host "File path: $($fileInfo.FullName)"
            
            # Display header contents for verification
            $bytes = [System.IO.File]::ReadAllBytes("$iconDir/icon.ico")
            Write-Host "File header (first 62 bytes - ICO header + Directory Entry + BITMAPINFOHEADER):"
            for ($i = 0; $i -lt [Math]::Min(62, $bytes.Length); $i++) {
                Write-Host ("{0:X2} " -f $bytes[$i]) -NoNewline
                if (($i + 1) % 16 -eq 0) { Write-Host "" }
            }
            Write-Host "`nVerifying image data..."
            Write-Host "XOR mask starts at offset 62, length: 4096"
            Write-Host "AND mask starts at offset 4158, length: 128"
            
            # Verify file integrity
            if ($bytes.Length -eq 4264) {
                Write-Host "File size matches expected size"
            } else {
                Write-Host "Warning: File size mismatch. Expected 4264, got $($bytes.Length)"
            }
        } else {
            Write-Error "Failed to create icon file"
            exit 1
        }

    - name: Install dependencies (macos only)
      if: ${{ steps.check_gui_unix.outputs.gui_exists == 'true' && matrix.platform == 'macos-latest' }}
      run: |
        brew install pkg-config

    - name: Install frontend dependencies
      if: |
        (runner.os == 'Windows' && steps.check_gui.outputs.gui_exists == 'true') ||
        (runner.os != 'Windows' && steps.check_gui_unix.outputs.gui_exists == 'true')
      run: |
        cd gui/vector-analyzer
        yarn install

    - name: Build Tauri app
      if: |
        (runner.os == 'Windows' && steps.check_gui.outputs.gui_exists == 'true') ||
        (runner.os != 'Windows' && steps.check_gui_unix.outputs.gui_exists == 'true')
      run: |
        cd gui/vector-analyzer
        yarn run tauri:build
