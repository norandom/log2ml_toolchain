name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  python-build:
    strategy:
      matrix:
        python-version: ["3.11"]
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Copy README.md to core directory
      run: |
        cp README.md core/
        cp README.md core/log2ml/
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        cd core
        pip install -e ".[dev]"
        cd ..
    
    - name: Test with pytest
      run: |
        cd core
        pytest tests/ --cov=log2ml --cov-report=xml
        cd ..
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./core/coverage.xml
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  tauri-build:
    needs: python-build
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest, macos-latest]

    runs-on: ${{ matrix.platform }}
    steps:
    - uses: actions/checkout@v4

    - name: Check GUI directory (Windows)
      id: check_gui
      if: ${{ runner.os == 'Windows' }}
      shell: pwsh
      run: |
        $ErrorActionPreference = 'Stop'
        if ((Test-Path 'gui/vector-analyzer') -and (Test-Path 'gui/vector-analyzer/package.json')) {
          "gui_exists=true" >> $env:GITHUB_OUTPUT
        } else {
          "gui_exists=false" >> $env:GITHUB_OUTPUT
          Write-Host "GUI directory or package.json not found - skipping Tauri build"
          exit 0
        }

    - name: Check GUI directory (Unix)
      id: check_gui_unix
      if: ${{ runner.os != 'Windows' }}
      shell: bash
      run: |
        if [ -d "gui/vector-analyzer" ] && [ -f "gui/vector-analyzer/package.json" ]; then
          echo "gui_exists=true" >> $GITHUB_OUTPUT
        else
          echo "gui_exists=false" >> $GITHUB_OUTPUT
          echo "GUI directory or package.json not found - skipping Tauri build"
          exit 0
        fi

    - name: Setup node
      if: |
        (runner.os == 'Windows' && steps.check_gui.outputs.gui_exists == 'true') ||
        (runner.os != 'Windows' && steps.check_gui_unix.outputs.gui_exists == 'true')
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Install Rust stable
      if: |
        (runner.os == 'Windows' && steps.check_gui.outputs.gui_exists == 'true') ||
        (runner.os != 'Windows' && steps.check_gui_unix.outputs.gui_exists == 'true')
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy

    - name: Rust lint
      if: |
        (runner.os == 'Windows' && steps.check_gui.outputs.gui_exists == 'true') ||
        (runner.os != 'Windows' && steps.check_gui_unix.outputs.gui_exists == 'true')
      run: |
        cd gui/vector-analyzer/src-tauri
        cargo fmt --check
        cargo clippy -- -D warnings

    - name: Install dependencies (ubuntu only)
      if: ${{ steps.check_gui_unix.outputs.gui_exists == 'true' && matrix.platform == 'ubuntu-latest' }}
      run: |
        # Update package lists and install required tools
        sudo apt-get update
        sudo apt-get install -y \
          pkg-config \
          build-essential \
          libgtk-3-dev \
          libwebkit2gtk-4.0-dev \
          libappindicator3-dev \
          librsvg2-dev \
          patchelf \
          libsoup2.4-dev

        # Create a temporary directory for package download
        TEMP_DIR=$(mktemp -d)
        cd $TEMP_DIR

        # Download and install GDK development packages
        sudo apt-get download libgdk-3-dev libgtk-3-dev
        for deb in *.deb; do
          sudo dpkg -x "$deb" .
        done

        # Find and set up pkg-config paths
        PKG_PATHS=(
          "$TEMP_DIR/usr/lib/x86_64-linux-gnu/pkgconfig"
          "$TEMP_DIR/usr/share/pkgconfig"
          "/usr/lib/x86_64-linux-gnu/pkgconfig"
          "/usr/share/pkgconfig"
          "/usr/lib/pkgconfig"
        )

        # Export PKG_CONFIG_PATH
        export PKG_CONFIG_PATH=$(IFS=:; echo "${PKG_PATHS[*]}")
        echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH" >> $GITHUB_ENV

        # Install specific versions of GTK/GDK packages
        sudo apt-get install -y --allow-downgrades \
          libgtk-3-0=3.24.20-0ubuntu1 \
          libgtk-3-dev=3.24.20-0ubuntu1 \
          libgdk-pixbuf2.0-dev=2.40.0+dfsg-3ubuntu0.2 \
          libglib2.0-dev=2.64.6-1~ubuntu20.04.4

        # Create required symbolic links
        sudo mkdir -p /usr/lib/x86_64-linux-gnu/pkgconfig
        for pc in $(find /usr -name "gdk*.pc" -o -name "gtk*.pc" 2>/dev/null); do
          sudo ln -sf "$pc" /usr/lib/x86_64-linux-gnu/pkgconfig/
        done

        # Set environment variables
        echo "LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH" >> $GITHUB_ENV
        echo "PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1" >> $GITHUB_ENV
        echo "PKG_CONFIG_ALLOW_SYSTEM_LIBS=1" >> $GITHUB_ENV

        # Verify installation
        echo "Installed packages:"
        dpkg -l | grep -E 'libgtk|libgdk'
        
        echo "pkg-config paths:"
        pkg-config --variable pc_path pkg-config
        
        echo "Available .pc files:"
        find /usr/lib/x86_64-linux-gnu/pkgconfig -name "*.pc"
        
        echo "GDK library check:"
        pkg-config --libs --cflags gdk-3.0 || true
        
        echo "Library locations:"
        ldconfig -p | grep -E 'libgdk|libgtk'

    - name: Verify GDK/GTK Setup
      if: ${{ steps.check_gui_unix.outputs.gui_exists == 'true' && matrix.platform == 'ubuntu-latest' }}
      run: |
        # Test GDK availability
        echo "Testing GDK configuration..."
        cat << 'EOF' > test.c
        #include <gdk/gdk.h>
        int main() {
            gdk_init(NULL, NULL);
            return 0;
        }
        EOF
        
        gcc -o test test.c $(pkg-config --cflags --libs gdk-3.0) || echo "Compilation failed"
        
        # Show system paths
        echo "System paths:"
        echo $PATH
        echo $LD_LIBRARY_PATH
        echo $PKG_CONFIG_PATH

    - name: Install dependencies (macos only)
      if: ${{ steps.check_gui_unix.outputs.gui_exists == 'true' && matrix.platform == 'macos-latest' }}
      run: |
        brew install pkg-config

    - name: Install frontend dependencies
      if: |
        (runner.os == 'Windows' && steps.check_gui.outputs.gui_exists == 'true') ||
        (runner.os != 'Windows' && steps.check_gui_unix.outputs.gui_exists == 'true')
      run: |
        cd gui/vector-analyzer
        yarn install

    - name: Build Tauri app
      if: |
        (runner.os == 'Windows' && steps.check_gui.outputs.gui_exists == 'true') ||
        (runner.os != 'Windows' && steps.check_gui_unix.outputs.gui_exists == 'true')
      run: |
        cd gui/vector-analyzer
        yarn run tauri:build
