name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  python-build:
    strategy:
      matrix:
        python-version: ["3.11"]
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Copy README.md to core directory
      run: |
        cp README.md core/
        cp README.md core/log2ml/
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        cd core
        pip install -e ".[dev]"
        cd ..
    
    - name: Test with pytest
      run: |
        cd core
        pytest tests/ --cov=log2ml --cov-report=xml
        cd ..
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./core/coverage.xml
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  tauri-build:
    needs: python-build
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
    - uses: actions/checkout@v4

    - name: Check GUI directory (Windows)
      id: check_gui
      if: ${{ runner.os == 'Windows' }}
      shell: pwsh
      run: |
        $ErrorActionPreference = 'Stop'
        if ((Test-Path 'gui/vector-analyzer') -and (Test-Path 'gui/vector-analyzer/package.json')) {
          "gui_exists=true" >> $env:GITHUB_OUTPUT
        } else {
          "gui_exists=false" >> $env:GITHUB_OUTPUT
          Write-Host "GUI directory or package.json not found - skipping Tauri build"
          exit 0
        }

    - name: Check GUI directory (Unix)
      id: check_gui_unix
      if: ${{ runner.os != 'Windows' }}
      shell: bash
      run: |
        if [ -d "gui/vector-analyzer" ] && [ -f "gui/vector-analyzer/package.json" ]; then
          echo "gui_exists=true" >> $GITHUB_OUTPUT
        else
          echo "gui_exists=false" >> $GITHUB_OUTPUT
          echo "GUI directory or package.json not found - skipping Tauri build"
          exit 0
        fi

    - name: Setup node
      if: |
        (runner.os == 'Windows' && steps.check_gui.outputs.gui_exists == 'true') ||
        (runner.os != 'Windows' && steps.check_gui_unix.outputs.gui_exists == 'true')
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Install Rust stable
      if: |
        (runner.os == 'Windows' && steps.check_gui.outputs.gui_exists == 'true') ||
        (runner.os != 'Windows' && steps.check_gui_unix.outputs.gui_exists == 'true')
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy

    - name: Rust lint
      if: |
        (runner.os == 'Windows' && steps.check_gui.outputs.gui_exists == 'true') ||
        (runner.os != 'Windows' && steps.check_gui_unix.outputs.gui_exists == 'true')
      run: |
        cd gui/vector-analyzer/src-tauri
        cargo fmt --check
        cargo clippy -- -D warnings

    - name: Install dependencies (ubuntu only)
      if: ${{ steps.check_gui_unix.outputs.gui_exists == 'true' && matrix.platform == 'ubuntu-latest' }}
      run: |
        # Add required repositories
        sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
        sudo apt-get update

        # Install required packages
        sudo apt-get install -y \
          libgtk-3-dev \
          libwebkit2gtk-4.0-dev \
          libappindicator3-dev \
          librsvg2-dev \
          patchelf \
          libatk1.0-dev \
          libgdk-pixbuf2.0-dev \
          libcairo2-dev \
          libsoup2.4-dev \
          libpango1.0-dev \
          build-essential \
          curl \
          wget \
          file \
          libssl-dev \
          pkg-config \
          gtk+3.0 \
          gir1.2-gtk-3.0 \
          libatk-bridge2.0-dev \
          at-spi2-core \
          libatk-adaptor

    - name: Configure pkg-config (ubuntu only)
      if: ${{ steps.check_gui_unix.outputs.gui_exists == 'true' && matrix.platform == 'ubuntu-latest' }}
      run: |
        # Find all relevant pkg-config paths
        PKG_CONFIG_PATHS=(
          "/usr/lib/x86_64-linux-gnu/pkgconfig"
          "/usr/lib/pkgconfig"
          "/usr/share/pkgconfig"
          "/usr/local/lib/pkgconfig"
          "/usr/local/share/pkgconfig"
        )
        
        # Build PKG_CONFIG_PATH string
        PKG_CONFIG_PATH=$(IFS=:; echo "${PKG_CONFIG_PATHS[*]}")
        echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH" >> $GITHUB_ENV
        export PKG_CONFIG_PATH="$PKG_CONFIG_PATH"
        
        # Debug package configuration
        echo "Checking ATK package:"
        pkg-config --exists atk && echo "ATK package found" || echo "ATK package not found"
        pkg-config --modversion atk || true
        
        echo "Checking GDK package:"
        pkg-config --exists gdk-3.0 && echo "GDK package found" || echo "GDK package not found"
        pkg-config --modversion gdk-3.0 || true
        
        echo "Searching for .pc files:"
        find /usr -name "atk.pc" 2>/dev/null || true
        find /usr -name "gdk-3.0.pc" 2>/dev/null || true
        
        echo "Installed packages:"
        dpkg -l | grep -E "atk|gtk|gdk"
        
        echo "Available pkg-config packages:"
        pkg-config --list-all | grep -E "atk|gtk|gdk"

    - name: Verify Ubuntu packages
      if: ${{ steps.check_gui_unix.outputs.gui_exists == 'true' && matrix.platform == 'ubuntu-latest' }}
      run: |
        # List installed GTK packages
        echo "Installed GTK packages:"
        dpkg -l | grep -E "libgtk|gir1.2-gtk|gtk\+3.0"
        
        # Debug pkg-config
        echo -e "\npkg-config debug info:"
        pkg-config --debug 2>&1 gdk-3.0 || true
        
        # Find gdk-3.0.pc
        echo -e "\nSearching for gdk-3.0.pc:"
        find /usr -name "gdk-3.0.pc" 2>/dev/null || true
        
        # Check GTK version
        echo -e "\nGTK version info:"
        pkg-config --modversion gtk+-3.0 || true
        
        # List all available packages
        echo -e "\nAll available pkg-config packages:"
        pkg-config --list-all | grep -i "gtk\|gdk"

    - name: Create valid icon for Windows
      if: ${{ steps.check_gui.outputs.gui_exists == 'true' && matrix.platform == 'windows-latest' }}
      shell: pwsh
      run: |
        # Create a directory for the icon if it doesn't exist
        $iconDir = "gui/vector-analyzer/src-tauri/icons"
        New-Item -ItemType Directory -Force -Path $iconDir

        # Create a minimal valid 32x32 ICO file
        $icoBytes = @(
          # ICO header
          0x00, 0x00,  # Reserved
          0x01, 0x00,  # Image type (1 = ICO)
          0x01, 0x00,  # Number of images
          
          # Directory entry
          0x20, 0x00,  # Width (32)
          0x20, 0x00,  # Height (32)
          0x00,        # Color palette
          0x00,        # Reserved
          0x01, 0x00,  # Color planes
          0x20, 0x00,  # Bits per pixel (32)
          0x68, 0x04, 0x00, 0x00,  # Size of image data (1128 bytes)
          0x16, 0x00, 0x00, 0x00   # Offset to image data
        )
        
        # Add minimal BMP data (BITMAPINFOHEADER)
        $bmpHeader = @(
          0x28, 0x00, 0x00, 0x00,  # Size of header (40 bytes)
          0x20, 0x00, 0x00, 0x00,  # Width (32)
          0x40, 0x00, 0x00, 0x00,  # Height (64 = 32 * 2 for XOR and AND masks)
          0x01, 0x00,              # Planes (1)
          0x20, 0x00,              # Bits per pixel (32)
          0x00, 0x00, 0x00, 0x00,  # Compression (0 = none)
          0x00, 0x00, 0x00, 0x00,  # Image size (0 for uncompressed)
          0x00, 0x00, 0x00, 0x00,  # X pixels per meter
          0x00, 0x00, 0x00, 0x00,  # Y pixels per meter
          0x00, 0x00, 0x00, 0x00,  # Colors used
          0x00, 0x00, 0x00, 0x00   # Important colors
        )
        
        # Create image data (32x32 pixels, BGRA format)
        $imageData = New-Object byte[] 4096  # 32 * 32 * 4 bytes per pixel
        for ($i = 0; $i -lt $imageData.Length; $i += 4) {
          # Set each pixel to white with full opacity
          $imageData[$i] = 0xFF     # Blue
          $imageData[$i + 1] = 0xFF # Green
          $imageData[$i + 2] = 0xFF # Red
          $imageData[$i + 3] = 0xFF # Alpha
        }
        
        # Create mask data (32x32 pixels, 1 bit per pixel, padded to 32-bit boundary)
        $maskData = New-Object byte[] 128  # (32 * 32) / 8 bytes
        
        # Combine all parts
        $iconData = $icoBytes + $bmpHeader + $imageData + $maskData
        
        # Write the icon file
        [System.IO.File]::WriteAllBytes("$iconDir/icon.ico", $iconData)
        
        # Verify the file was created
        if (Test-Path "$iconDir/icon.ico") {
          Write-Host "Icon file created successfully"
          Write-Host "File size: $((Get-Item "$iconDir/icon.ico").Length) bytes"
        } else {
          Write-Error "Failed to create icon file"
          exit 1
        }

    - name: Install dependencies (macos only)
      if: ${{ steps.check_gui_unix.outputs.gui_exists == 'true' && matrix.platform == 'macos-latest' }}
      run: |
        brew install pkg-config

    - name: Install frontend dependencies
      if: |
        (runner.os == 'Windows' && steps.check_gui.outputs.gui_exists == 'true') ||
        (runner.os != 'Windows' && steps.check_gui_unix.outputs.gui_exists == 'true')
      run: |
        cd gui/vector-analyzer
        yarn install

    - name: Build Tauri app
      if: |
        (runner.os == 'Windows' && steps.check_gui.outputs.gui_exists == 'true') ||
        (runner.os != 'Windows' && steps.check_gui_unix.outputs.gui_exists == 'true')
      run: |
        cd gui/vector-analyzer
        yarn run tauri:build
